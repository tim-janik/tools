#!/bin/bash
# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0

# Usage: . ~/.bash_prompt

# Print Git, JJ prompt
bash_prompt_src_repo()
{
  test -r .jj -o -r ../.jj -o -r ../../.jj -o -r ../../../.jj -o -r ../../../../.jj -o -r ../../../../../.jj -o -r ../../../../../../.jj -o \
       -r ../../../../../../../.jj -o -r ../../../../../../../../.jj -o -r ../../../../../../../../../.jj -o -r ../../../../../../../../../../.jj -o \
       -r ../../../../../../../../../../../.jj -o -r ../../../../../../../../../../../../.jj && {
    local T='
      "[@ " ++ concat(
         separate(" ",
           format_short_change_id_with_hidden_and_divergent_info(self),
           format_short_commit_id(commit_id),
           bookmarks,
           if(conflict, label("conflict", "conflict")),
         ),
       ) ++ "]"'	# committer.timestamp().local().format("%Y-%m-%d"),
    jj --ignore-working-copy show --tool true --color=always -r @ -T "$T" # builtin_log_oneline
    # local O='"⋮" ++ id.short() ++ "]"' ; jj --ignore-working-copy op log --no-graph --color=always -l 1 -T "$O"
    return
  }
  test -r .git -o -r ../.git -o -r ../../.git -o -r ../../../.git -o -r ../../../../.git -o -r ../../../../../.git -o -r ../../../../../../.git -o \
       -r ../../../../../../../.git -o -r ../../../../../../../../.git -o -r ../../../../../../../../../.git -o -r ../../../../../../../../../../.git -o \
       -r ../../../../../../../../../../../.git -o -r ../../../../../../../../../../../../.git && {
    local gp=`git -P log -1 --color=always --pretty='%C(auto)%h ꜓%C(auto)%(decorate:prefix=,suffix=,tag=,pointer=→,separator= )' 2>/dev/null`
    echo "\e[0m[⧟ ${gp/HEAD/}\e[0m]"
  }
}

# Function to print fancy prompt
bash_prompt_echo()
{
  # Last exit status and execution time
  local exs=$? ps0start="$PS0start" w="${1:-$PWD}"
  # Exit status and elapsed time formatting
  local etime='\t' ex=$''
  ex="\e[35m$exs\e[0m"	# (($exs == 0)) && unset exs || ex=" \e[35m$exs\e[0m"
  if test "${#ps0start}" -gt 9 ; then
    local now=`/usr/bin/date +%s%N`			# mseconds
    local elapsed=$[ ${now::-6} - ${ps0start::-6} ]	# mseconds
    etime=''
    (( $elapsed < 86400000 )) || { etime=$etime$[ $elapsed / 86400000 ]d ; elapsed=$[ $elapsed % 86400000 ] ; }
    (( $elapsed <  3600000 )) || { etime=$etime$[ $elapsed /  3600000 ]h ; elapsed=$[ $elapsed % 3600000 ] ; }
    (( $elapsed <    60000 )) || { etime=$etime$[ $elapsed /   60000 ]m ;  elapsed=$[ $elapsed % 60000 ] ; }
    (( $elapsed <        1 )) || { etime=$etime$[ $elapsed /    1000 ].;   elapsed=000$elapsed;
				   etime=$etime${elapsed:(-3)}s; }
    (( ${#etime} == 0 )) || etime="\e[0;33m""$etime""\e[0m"
    # Note, `trap "save $SECONDS"` is fragile, inaccurate and breaks for subshells
  elif test "$exs" == 0 ; then # no execution time seen, skip exit status display
    ex=' '
  fi
  # Battery formatting
  local pw="↯" bat="\e[33;1m↯\e[0m "
  if test -r /sys/class/power_supply/BAT0/status && read bs < /sys/class/power_supply/BAT0/status && test "$bs" == Discharging ; then
    pw="⌁" # Discharging
    read cp < /sys/class/power_supply/BAT0/charge_now && read cf < /sys/class/power_supply/BAT0/charge_full && cp=$[ $cp * 100 / $cf ]
    { (( $cp < 20 )) && bat="\e[31m$pw$cp%\e[0m "; } ||
      { (( $cp < 80 )) && bat="\e[33m$pw$cp%\e[0m "; } ||
      { (( $cp < 100 )) && bat="\e[32m$pw$cp%\e[0m "; } ||
      { (( $cp >= 100 )) && bat="\e[32m$pw\e[0m "; }
  fi
  # Temperature formatting
  local tc=
  test -x /usr/bin/acpi &&
    tc=$(/usr/bin/acpi -t | sed -nr 's/.*, ([0-9]+\.[0-9]) degrees? C.*/\1/p' |
	   awk 'BEGIN{a=0}{if ($1>0+a) a=$1} END{if (a>=40) print a>=70 ? "\033[31m" a "°\033[0m " : a "° "}')
  # Jobs formatting
  local jj=
  test -z "$(jobs -p)" || {
    local jr=(`jobs -rp`) js=(`jobs -sp`)
    jr=${#jr[@]}
    js=${#js[@]}
    (( $js > 0 )) && jj="\e[0;2;37m$js""z "
    (( $jr > 0 )) && jj="\e[0;2;37m$jr& "
    (( $jr > 0 && $js > 0 )) && jj="\e[0;2;37m$jr&/$js""z "
  }
  # User @ Host formatting
  local u="${LOGNAME-$USER}" h="$HOSTNAME"
  local userhost="\e[0;3;32m$u@$h"
  local sshpre=
  test -z "$SSH_TTY" || { sshpre="🌍 "; userhost="$sshpre\e[0;3;4;32m$u""@""\e[1m$h"; }
  # Writable Colon
  local wcolon='\e[0;32m:\e[01;34m'
  test -w . || wcolon='\e[0;31m:\e[34m'
  # Git, JJ, etc repos
  local gp=$(bash_prompt_src_repo)
  # Window title (xterm)
  local wt=
  case "$TERM" in
    xterm*|rxvt*)	wt="\e]0;$sshpre$u@$h:$w\a" ;;
  esac
  # Prompt
  test 1 -eq $(( $COLUMNS - ${#w} >  80 )) && T='\t' || T=' '
  test 1 -eq $(( $COLUMNS - ${#w} > 120 )) && S='\t\t' || S=' '
  test 1 -eq $(( $COLUMNS - ${#w} > 150 )) && S="$S$S"
  echo -ne "$wt$bat""$tc""$jj""$userhost""$wcolon""${w%/}/""\e[00m"" $T$ex" "$etime""$S""$T$gp""\e[0m"
}

# Install fancy prompt with shell command execution time recording
[[ $- =~ i ]] && {	# Prompt for interactive shell
  PS1='$(bash_prompt_echo "\w")\n⮞ '
  test -x /usr/bin/date && { # Time stamping via PS0
    # Assign/reset global PS0start shell variable via arithmetic evaluation
    PS1='$(bash_prompt_echo "\w")${IFS:$((PS0start=000000)):0}\n⮞ '
    test -x /usr/bin/date && PS0='${IFS:$((PS0start=`/usr/bin/date +%s%N`)):0}'
  }
}
