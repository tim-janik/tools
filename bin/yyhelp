#!/bin/bash
# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0
# This file is to be `source`ed, so use `set -Eeuo pipefail` only inside functions

# __yyhelp_match
__yyhelp_match() # wildcard string matches
{
  case "$2" in
    $1) return 0 ;;					# Pattern $1 must be unquoted to allow *?[]
  esac
  return 1
}

# __yyhelp_echo_signoff
__yyhelp_echo_signoff()
(
  set -Eeuo pipefail #-x
  echo # separating newline before signoff section
  git var GIT_COMMITTER_IDENT | sed -e 's/>.*/>/ ; s/^/Signed-off-by: /'
)

# list_committable
__yyhelp_list_committable() # [FILES...]
(
  set -Eeuo pipefail #-x
  gitdir="$(git rev-parse --git-dir 2>/dev/null)"
  gitprefix="$(git rev-parse --show-prefix)" || : && test -z "$gitprefix" && gitprefix=. # no subdir support if GIT_DIR is set
  test -s "$gitdir/commit-ignore" && commitignore="$gitdir/commit-ignore" || commitignore=
  test -z "$*" && commitdir=. || commitdir=
  test "${BARE_PATHS:-}" = true && stripprefix="" || stripprefix="$gitprefix"
  test -n "$stripprefix" -a "${stripprefix: -1}" != / && stripprefix="$stripprefix/" # force trailing /
  TAB=$'\t'
  git diff-index --name-status --no-renames HEAD -- $commitdir "$@" | while IFS="$TAB" read -r mode file ; do
    case "$mode" in
      D)  test -n "$(git diff-files -- "$file")" && mode=! ;;
      M)  test -n "$commitignore" && fgrep -qx "$file" "$commitignore" && mode=n ;;
    esac
    if test "${BARE_PATHS:-}" = true ; then
      echo "${file#$stripprefix}"
    else
      echo -e "$mode\t${file#$stripprefix}"
    fi
  done
)

# __yyhelp_compgen_refs
__yyhelp_compgen_refs()
{ # $1=command $2=word4completion ยง3=precedingword
  local cur refs
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=()  # Array variable storing the possible completions.
  refs=$( git for-each-ref --format='%(refname:short)' refs/heads )
  #if test "$1" == "$3" ; then ... fi # completing first arg
  COMPREPLY=( $(compgen -W "$refs" -- "$cur") )
}

# __yyhelp_compgen_tags
__yyhelp_compgen_tags()
{
  local cur refs
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=()  # Array variable storing the possible completions.
  refs=$( git for-each-ref --format='%(refname:short)' refs/tags )
  if test "$1" == "$3" ; then # completing first arg
    COMPREPLY=( $(compgen -W "$refs" -- "$cur") )
  fi
}

# yytagdel
yytagdel()
(
  set -Eeuo pipefail
  while test x"${1:-}" != x ; do
    git tag -d "$1" || return $?
    shift
  done
)

# yydiff
yydiff()
(
  set -Eeuo pipefail #-x

  if git rev-parse --is-inside-work-tree >/dev/null 2>&1 ; then
    # git update-index --refresh 2>/dev/null || :
    if __yyhelp_match '* -- *' " $* " ; then
      LESS="$LESS -+c" git diff HEAD "$@"
    elif __yyhelp_match '* -*' " $* " ; then
      LESS="$LESS -+c" git diff HEAD "$@" -- .
    else
      LESS="$LESS -+c" git diff HEAD -- "${@:-.}"
    fi
  elif type jj >/dev/null 2>&1 && jj root >/dev/null 2>&1 ; then
    B= C= O=--git W=
    tty -s && C="--color=always"
    while test $# -gt 0 ; do
      case "$1" in
	-b)		B=-b ; shift ;;
	--word-diff)	W=--word-diff ; shift ;;
	*)		break ;;
      esac
    done
    test -n "$B$W" && {
      O=--tool\ yyhelp
      export YYHELP_EXECVE_ARGS="git diff --src-prefix / --dst-prefix / --no-index --minimal $B $W $C"
    }
    if tty -s ; then
      jj diff $C $O "$@" | LESS="$LESS -+c" less
    else
      jj diff $C $O "$@"
    fi
  else
    echo "$0: no git/jj repository" >&2 ; exit 1
  fi
)
test -z "${YYHELP_EXECVE_ARGS:-}" || (
  set -x
  exec $YYHELP_EXECVE_ARGS -- "$@"
  exit ${YYHELP_EXECVE_STATUS:-$?}
)

# yyinfo
yyinfo()
(
  set -Eeuo pipefail #-x
  gitdir="$(git rev-parse --git-dir 2>/dev/null)"
  GITURL="`git config --get remote.origin.url`" || :
  test -z "$GITURL" && GITURL="`cd \"$gitdir\" && pwd`" # no url, must be local
  REPO="`basename \"$(git rev-parse --show-toplevel)\" `"
  REPODIR="`git rev-parse --show-cdup`" || { test -z "$REPODIR" && REPODIR=. ; }
  test -z "$REPODIR" && CURRENT=. || CURRENT=`realpath --relative-to="$REPODIR" ./`
  HC="`git rev-parse --verify HEAD   2>/dev/null`"; test -n "$HC" && HC="`date -d \"$(git log -n1 --pretty=format:%cD $HC)\" '+%F %T %z'` # $HC"
  # origin/HEAD is not always present
  RH="`git rev-parse --verify origin 2>/dev/null`" || : ; test -n "$RH" && RH="`date -d \"$(git log -n1 --pretty=format:%cD $RH)\" '+%F %T %z'` # $RH"
  HSYM=$(git symbolic-ref HEAD || git rev-parse HEAD) && HSYM=${HSYM#refs/heads/}
  true			&& echo "GIT-Repo: $REPO"
  true			&& echo "URL:      $GITURL"
  true                  && echo "Path:     $CURRENT"
  true			|| echo "Method:   git-push and git-pull are used for updates"
  test -n "$HC"		&& echo "HEAD:     $HC"
  test -n "$HSYM"	&& echo "BRANCH:   $HSYM"
  test -n "$RH"		&& echo "Origin:   $RH"
  return 0
)

# yyll
yyll()
(
  set -Eeuo pipefail #-x

  if git rev-parse --is-inside-work-tree >/dev/null 2>&1 ; then
    LESS="$LESS -F" git log --graph --decorate --full-history --pretty="%C(yellow)%h%Creset%C(auto)%d%Creset %s %C(bold blue)<%aL>%Creset %C(white dim)%cs%Creset" "$@"
  elif type jj >/dev/null 2>&1 && jj root >/dev/null 2>&1 ; then
    LESS="$LESS -F" jj log -r :: "$@"
  else
    echo "$0: no git/jj repository" >&2 ; exit 1
  fi
)

# yylog
yylog()
(
  set -Eeuo pipefail #-x

  if git rev-parse --is-inside-work-tree >/dev/null 2>&1 ; then
    LESS="$LESS -F" git log --stat "$@"
  elif type jj >/dev/null 2>&1 && jj root >/dev/null 2>&1 ; then
    [[ " $* " =~ " -p "|--patch ]] && O=--git || O=
    LESS="$LESS -F" jj log -T builtin_log_detailed -s -r :: $O "$@"
  else
    echo "$0: no git/jj repository" >&2 ; exit 1
  fi
)

# yylp
yylp()
(
  set -Eeuo pipefail #-x

  if git rev-parse --is-inside-work-tree >/dev/null 2>&1 ; then
    LESS="$LESS -F" git log -p --stat "$@"
  elif type jj >/dev/null 2>&1 && jj root >/dev/null 2>&1 ; then
    LESS="$LESS -F" jj log -s --git -r ::@ "$@"
  else
    echo "$0: no git/jj repository" >&2 ; exit 1
  fi
)

# yymerge
yymerge()
(
  source "$(git --exec-path)/git-sh-setup"	# die, require_work_tree, etc
  set -Eeuo pipefail		     		# fail early *after* git-sh-setup
  git describe --dirty | fgrep -qe -dirty && die "$0: working tree must not be dirty"
  # args and vars
  REWORD=false ; BRANCH= ; DEST=
  while test $# -ne 0 ; do
    case "$1" in \
      -r)		REWORD=true && shift ;;
      -d)		shift && DEST="$1" && shift ;;
      *)                BRANCH="$1" ; shift ;;
    esac ; done
  # need source branch
  test -z "$BRANCH" && BRANCH=$(git symbolic-ref HEAD || git rev-parse HEAD) && BRANCH=${BRANCH#refs/heads/}
  git rev-parse -q --verify "$BRANCH^0" >/dev/null || die "$0: unknown revision: $BRANCH"
  # need destination branch
  test -n "$DEST" ||
    for M in master trunk main ; do
      test -n "$(git config --get branch.$M.remote)" && DEST="$M" && break
    done
  test -n "$DEST" || die "$0: missing merge destination branch"
  git rev-parse -q --verify "$DEST^0" >/dev/null || die "$0: unknown revision: $DEST"
  # reword top commit
  test "$REWORD" == true && {
    git checkout "$BRANCH"
    git commit --amend
    BRANCH=$(git symbolic-ref HEAD || git rev-parse HEAD)
  }
  # need author
  git var GIT_AUTHOR_IDENT    2>/dev/null | grep -q '\b[0-9]\{8,\}[ ]\+[+-][0-9]\+ *$' || die "$0: missing commit author information"
  git var GIT_COMMITTER_IDENT 2>/dev/null | grep -q '\b[0-9]\{8,\}[ ]\+[+-][0-9]\+ *$' || die "$0: missing committer information"
  # operate on destination branch
  git checkout "$DEST"
  # create merge msg
  gitdir="$(git rev-parse --git-dir 2>/dev/null)"
  test -e "$gitdir/MERGE_MSG" && die "$0: $gitdir/MERGE_MSG: another merge already in progress?"
  git --no-pager diff -U0 "HEAD..$BRANCH" |	# examine all branch changes
    egrep "^\+.*\b(XXX|WIP|FIXME)\b" &&		# work still to be done
    sleep 5
  SEP="^^^^^^^^^^^^^^^^^^^^^^^^^^"
  echo -e "$SEP MERGE-DRAFT $SEP # DELETE THIS" > "$gitdir/MERGE_MSG"
  echo -e "Merge branch '$BRANCH'\n\n* Branch commit log:" >> "$gitdir/MERGE_MSG"
  git log --pretty=$'\f%s%+b' "HEAD..$BRANCH" |
    sed '/^\(Signed-off-by\|Acked-by\|Tested-by\|Cc\):/d' |
    sed '/^$/d ; s/^/\t/ ; s/^\t\f/  /' >> "$gitdir/MERGE_MSG"
  YYCOMMIT_SIGNOFF=$(git config --get yycommit.signoff) || :
  if test "${YYCOMMIT_SIGNOFF:-true}" == true ; then
    __yyhelp_echo_signoff >> "$gitdir/MERGE_MSG"
  fi
  # edit merge msg
  HO=`md5sum "$gitdir/MERGE_MSG"`
  $EDITOR "$gitdir/MERGE_MSG"
  HN=`md5sum "$gitdir/MERGE_MSG"`
  test "$HO" != "$HN" || {
    git checkout "$BRANCH"
    rm -f $gitdir/MERGE_MSG
    die "$0: aborting draft merge..."
  }
  # create merge
  git merge --no-edit --no-ff -m "`cat $gitdir/MERGE_MSG`" "$BRANCH" && rm -f $gitdir/MERGE_MSG
)

# yypr
yypr()
(
  set -Eeuo pipefail
  die() { echo "$*" 2>/dev/null ; exit -1 ; }
  ID="$1"
  git describe --dirty | fgrep -qe -dirty && die "yypr: working tree must not be dirty"
  command -V gh >/dev/null || die "yypr: command gh(1) required for pull requests"
  command -V jq >/dev/null || die "yypr: command jq(1) required for pull requests"
  PRBRANCH=pr"$ID"/$(gh pr view "$ID" --json author,headRefName | jq -r '(.author.login + "-" + .headRefName)')
  ( set -x
    git fetch origin pull/"$ID"/head:"$PRBRANCH"
    git checkout "$PRBRANCH"
  )
  git --no-pager log -1 --oneline
)

# yypushpull
yypushpull()
(
  set -Eeuo pipefail #-x
  git push "$@"
  git pull "$@"
)

# yystatus
yystatus()
(
  set -Eeuo pipefail #-x
  #__yyhelp_match '-[citu]' "$*" || { __yyhelp ; return ; }
  gitdir="$(git rev-parse --git-dir 2>/dev/null)"
  git update-index --refresh >/dev/null || :		# update stat info
  test -e $gitdir/info/exclude && EXCLUDE_FROM=--exclude-from=$gitdir/info/exclude || EXCLUDE_FROM=
  # list unknown files
  ! __yyhelp_match '*-[tc]*' "$*" &&
    git ls-files --others --directory $EXCLUDE_FROM --exclude-per-directory=.gitignore | {
      if test " $*" == " -u" ; then
	cat # sed '/\/$/d'
      elif test " $*" == " -i" ; then
	sed 's,^,/,; s,\(\.\),\\\1,g'			# abspath, escape .
      else
	sed $'s,^,?\t,'					# ?-prefix
      fi
    }
  # list known files
  __yyhelp_match '-[iu]' "$*" || {
    HEADREV=$(git rev-parse --verify $(git symbolic-ref -q HEAD 2>/dev/null) 2>/dev/null) || :
    if test -z "$HEADREV" ; then 			# empty history, list new files
      git ls-files | sed $'s/^/A\t/'
    else
      __yyhelp_list_committable				# list known files, path-relative
    fi
  } | {
    test " $*" != " -c" && cat ||
	sed 's/^[^ ]	\([^ ].*\)/* \1:/'
  }
)

# yyswitch
yyswitch()
{
  test ! -z "${__yyswitch_cmd}" ||
    git switch -h 2>/dev/null | grep -Fq branch &&
      __yyswitch_cmd=switch || __yyswitch_cmd=checkout
  git $__yyswitch_cmd "$@"
}

# yywarp
yywarp()
(
  test "$1" != "-" || exec git switch -
  test -z "$(git branch -l "$1")" || exec git switch "$1"
  git checkout "$@"
)

# yypurge
yypurge()
(
  set -Eeuo pipefail #-x
  gitdir="$(git rev-parse --git-dir 2>/dev/null)"
  git diff --src-prefix=HEAD --dst-prefix=worktree > "$gitdir/yypurge.tmpdiff"
  test -s "$gitdir/yypurge.tmpdiff" && mv "$gitdir/yypurge.tmpdiff" "$gitdir/yypurge.diff" || rm -f "$gitdir/yypurge.tmpdiff"
  git checkout -f HEAD
)

# yyhelp
__yyhelp()
(
  set -Eeuo pipefail #-x
  VERSION=YYHELP-22.07.25
  B='' ; N='' ; P=cat
  test -t 1 -a -t 0 && __yyhelp_match $'*\e[31m*' "`tput setaf 1 2>/dev/null`" && {
      B=$'\e[1m' ; N=$'\e[0m' ; P=${PAGER:-less}
    }
  #45678901234567890123456789012345678901234567890123456789012345678901234567890
  cat <<__EOF |
YYHELP                                                                    YYHELP

${B}NAME$N
	YYHELP - Simple and convenient Git wrapper

${B}SYNOPSIS$N
	yyadd [FILE]        Add file to the next commit, marks conflicts resolved
	yyblame [FILE]      Show revision and modifications per source code line
	yycommit [-c|-p|โฆ]  Use an editor to compose a commit and select files
	yydiff [--] [FILE]  Compare HEAD against working tree
	yyhelp              Show yyhelp command descriptions
	yyinfo              Show repository information
	yyll                One line log of reachable commits, with author, date
	yylr                One line log of all reachable git refs
	yylog               Show git log with extra info
	yylp                Show diffs in git log
	yylsbranches        List branches
	yylstags            List tags
	yymerge [-d BASE] [-r] BRANCH
	                    Merge BRANCH into BASE (or master/trunk/main)
	                    And reword the last commit with -r
	yypr <ID>           Fetch and checkout Github pull request #ID
	yypull              Pull sources from upstream
	yypushpull [REMOTE] Push pending changes, else pull from upstream
	yypurge             Reset the worktree files to match a clean checkout
	                    (the last yypurge leaves changes in .git/yypurge.diff)
	yyrestore [FILE]    Restore a file from HEAD
	yyrestore [FILE]    Restore a file from HEAD
	yyrm [FILE]         Force remove file from working tree
	yystatus [-[citu]]  Display working tree status
	                    -c: commit style; -i: .gitignore style;
	                    -t: trim unknown; -u: show unknown;
	yyswitch <BRANCH>   Switch to another branch
	yytagdel <TAGโฆ>     Delete tags
	yyuncommit          Undo the last commit (must not be pushed)
	yywarp <COMMITISH>  Use yyswitch for branches or force checkout

${B}DESCRIPTION$N
	The yyhelp set of commands provide simple aliases around Git(7), that
	for the most part take only the working tree and existing refs into
	account.
	The scope of this wrapper is confined to a fairly basic set of actions
	around source control management, such as adding, removing. modifying
	files and the simplest forms of tag and branch handling.

${B}INSTALLATION$N
	To install yyhelp, copy yyhelp into the ~/bin/ directory and invoke
		source yyhelp --aliases

${B}HISTORY$N
	Yyhelp was originally created (named YummyYummySourceControl) as a very
	shallow porcelain script around Git(7) tool option variants, to simplify
	common use cases, especially after cogito vanished.
	The prefix 'yy' was chosen to allow fast, conflict free shell completion.

$VERSION                                                           YYHELP
__EOF
  LESS="$LESS -+F -c" $P
  #	yylg                One line log of simplified history
)

# alias installation
__yyhelp_aliases()
{
  alias yyadd='git add'
  alias yyblame='LESS="$LESS -F" git blame'
  #alias yylg='git log --graph --decorate --oneline'
  alias yylr='LESS="$LESS -F" git log --graph --decorate --oneline --simplify-by-decoration --all'
  alias yypull='git pull'
  alias yyrestore='git restore --source HEAD --staged --worktree --'
  alias yyrm='git rm --force'
  alias yyuncommit='git reset --mixed -N HEAD~1'
  alias yylsbranches='LESS="$LESS -F" git branch -a -vv'
  alias yylstags='LESS="$LESS -F" git tag -n1 -l \*'
  # completions
  test -s /usr/share/bash-completion/completions/git || return
  source /usr/share/bash-completion/completions/git
  __git_complete yyadd _git_add
  #__git_complete yyblame _git_blame
  __git_complete yydiff _git_diff
  complete -W "--aliases" yyhelp
  #__git_complete yylg _git_log
  __git_complete yylr _git_log
  __git_complete yyll _git_log
  __git_complete yylog _git_log
  __git_complete yylp _git_log
  __git_complete yypull _git_pull
  __git_complete yypushpull __git_complete_remote_or_refspec
  complete -F __yyhelp_compgen_refs yymerge
  __git_complete yyrestore _git_restore
  __git_complete yyrm _git_rm
  complete -W '-c -i -t -u' yystatus
  complete -F __yyhelp_compgen_tags yytagdel
  complete -F __yyhelp_compgen_refs yymerge
  if [[ $(type -t _git_switch) == function ]] ; then
    __git_complete yyswitch _git_switch
  else
    __git_complete yyswitch _git_checkout
  fi
  __git_complete yywarp _git_checkout
}

# handle arguments
test $# -ne 0 || __yyhelp
while test $# -ne 0 ; do
  case "$1" in
    --aliases)	shift ; __yyhelp_aliases ;;
    *)		shift ;;
  esac
done

true
