#!/bin/bash
# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0
set -Eeuo pipefail #-x
SCRIPTNAME=`basename $0` && function die  { [ -n "$*" ] && echo "$SCRIPTNAME: $*" >&2; exit 127 ; }
SELF="$0"

# == PREVIEW fast path ==
export REVPAT='^[^a-z()0-9]*([k-xyz]{7,})([?]*)\ '		# lines start, ignore --graph, parse revision letters, catch '??'-postfix
if test -n "${JJFZF_OUTER_TEMPD:-}" -a -n "${JJ_CONFIG:-}" \
	-a "${1:-}" == preview					# preview command, nested invocation
then
  if [[ "${2:-}" =~ $REVPAT ]]					# match beginning of jj log line
  then
    cd "$(jj --ignore-working-copy root)"			# ensure root relative diffstat paths
    if [[ "${BASH_REMATCH[2]}" == '??' ]]			# divergent change_id
    then
      # https://martinvonz.github.io/jj/latest/FAQ/#how-do-i-deal-with-divergent-changes-after-the-change-id
      jj --no-pager --ignore-working-copy show -T builtin_log_oneline -r "${BASH_REMATCH[1]}" 2>&1 || :
    elif test -e "${JJFZF_OUTER_TEMPD:-}/evolog" 		# display evolog if toggled
    then
      jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} evolog --color=always -r "${BASH_REMATCH[1]}"
    else							# show commit and diff
      jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} log --color=always --no-graph -T 'jj_fzf_showdetails' -s -r "${BASH_REMATCH[1]}"
      exec jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} show --color=always -T ' "\n" ' -r "${BASH_REMATCH[1]}"
    fi
  else								# no valid revision
    true
  fi
  exit 0
fi

# == Config ==
STARTQUERY="recent7"	# query must include heads(mutable()) to observe duplicate/backout/etc results
TOMLCFG='revset-aliases.recent7 = " ancestors(heads(mutable()),7) ~ immutable() | immutable_heads() | bookmarks() | remote_bookmarks() "'
# JJ repository
JJROOT=$(jj --ignore-working-copy root) || die "$PWD: not a JJ repository"
JJFZFSHOW="jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} show --tool true"
JJFZFONELINE="jj --no-pager --ignore-working-copy log --color=always --no-graph -T builtin_log_oneline"
JJFZFPAGER="less -Rc"
JJSUBSHELL='T=$(tty 2>/dev/null||tty <&1 2>/dev/null||tty <&2 2>/dev/null)&&test -n "$T"&&echo -e "\n#\n# Type \"exit\" to leave subshell\n#" && exec /bin/bash -i <$T 1>$T 2>$T'
FZFSETTINGS=(
  --ansi --no-mouse
  --info default
  --layout reverse-list
  --scroll-off 3
  --bind "ctrl-x:jump"
  --bind 'home:first,end:last'
  --bind "ctrl-z:execute( $JJSUBSHELL )"
  --bind='f11:change-preview-window(bottom,75%,border-horizontal|)'
  --preview-window 'right,border-left'
)
FZFPOPUP=(fzf "${FZFSETTINGS[@]}" --margin 0,2%,5%,2% --border)
RELOAD="reload( exec $SELF loadlog {q} )"
TEMPD=

# == JJ_CONFIG ==
jj_config() {
  cat <<-__EOF__
	[revset-aliases]
	recent7 = " ancestors(heads(mutable()),7) ~ immutable() | immutable_heads() | bookmarks() | remote_bookmarks() "
	[template-aliases]
	# parsable version of builtin_log_oneline; https://github.com/martinvonz/jj/blob/main/cli/src/config/templates.toml
	jj_fzf_oneline = '''
	if(root,
	  format_root_commit(self),
	  label(if(current_working_copy, "working_copy"),
	    concat(
	      separate(" ",
	        format_short_change_id_with_hidden_and_divergent_info(self),
	        if(author.email(), author.username(), email_placeholder),
	        committer.timestamp().local().format("%Y-%m-%d"),
	        format_short_commit_id(commit_id),
	        bookmarks,
	        tags,
	        working_copies,
	        git_head,
	        if(conflict, label("conflict", "conflict")),
	        if(empty, label("empty", "(empty)")),
	        if(description,
	          description.first_line(),
	          label(if(empty, "empty"), description_placeholder),
	        ),
	      ) ++ "\n",
	    ),
	  )
	)'''
	# extended version of builtin_log_detailed; https://github.com/martinvonz/jj/blob/main/cli/src/config/templates.toml
	jj_fzf_showdetails = '''
	concat(
	  builtin_log_oneline,
	  "Change ID: " ++ self.change_id() ++ "\n",
	  "Commit ID: " ++ commit_id ++ "\n",
	  surround("Refs:      ", "\n", separate(" ", local_bookmarks, remote_bookmarks, tags)),
	  if(immutable, "Immutable: " ++ label("description placeholder", "true") ++ "\n"),
	  "Parents:  " ++ self.parents().map(|c| " " ++ c.change_id()) ++ "\n",
	  "Author:    " ++ format_detailed_signature(author) ++ "\n",
	  "Committer: " ++ format_detailed_signature(committer)  ++ "\n\n",
	  indent("    ",
	    coalesce(description, label(if(empty, "empty"), description_placeholder) ++ "\n")),
	  "\n",
	)'''
	[colors]
	"node working_copy" = { fg = "red", bold = true }
	"empty" = "blue"
	"empty description placeholder" = "blue"
	"description placeholder" = "blue"
	"working_copy empty" = "blue"
	"working_copy empty description placeholder" = "blue"
	"working_copy description placeholder" = "blue"
	bookmarks =  "bright green"
	tags = { fg = "yellow", bold = true }
	"diff removed token" = { underline = false }
	"diff added token" = { underline = false }
	__EOF__
}

# == Utils ==
# Create temporary dir, assigns $TEMPD
temp_dir()
{
  test -n "$TEMPD" || {
    TEMPD="`mktemp --tmpdir -d jjfzf0XXXXXX`" || die "mktemp failed"
    trap "rm -rf '$TEMPD'" 0 HUP INT QUIT TRAP USR1 PIPE TERM
  }
}
# Match JJ revision as first ASCII word (e.g. as in builtin_log_oneline)
export REVPAT='^[^a-z()0-9]*([k-xyz]{7,})([?]*)\ '
export OPPAT='^[^a-z()0-9]*([0-9a-f]{9,})\ '
# Extract JJ revision from first word
xrev()
(
  if [[ "$* " =~ $REVPAT ]] ; then      # jj log line
    if [[ "${BASH_REMATCH[2]}" == '??' ]] ; then   # https://martinvonz.github.io/jj/latest/FAQ/#how-do-i-deal-with-divergent-changes-after-the-change-id
      echo "${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
      false
    else
      rev_changeid "${BASH_REMATCH[1]}"
    fi
  elif [[ "$*" =~ ^([^\ ]+)$ ]] ; then	# revision identifier w/o whitespace
    rev_changeid "${BASH_REMATCH[1]}"
  fi
)
# Look up full revision via JJ change_id
rev_changeid()	( $JJFZFSHOW -T 'change_id' -r "$1" )
# Look up full commit hash via JJ commit_id
rev_commitid()	( $JJFZFSHOW -T 'commit_id' -r "$1" )
# List all bookmarks of a revision
rev_bookmarks()	( $JJFZFSHOW -T 'concat(separate(" ",bookmarks))' -r "$1" )
# Get revision description
rev_description() ( $JJFZFSHOW -T 'concat(description)' -r "$1" )
# Condense commit empty/description/parent state into a key word
rev_edpstate()
(
  export EDPSTATE='separate("-", if(empty, "empty", "diff"), if(description, "description", "silent"), "p" ++ self.parents().len()) ++ "\n"'
  $JJFZFSHOW -r "$1" -T "$EDPSTATE" # empty-description-p2 diff-silent-p1 etc
)
# Require .git directory and set GIT_DIR
require_git_dir()
{
  test -e "$JJROOT/.git" &&
    export GIT_DIR="$JJROOT/.git" || {
      test -e "$JJROOT/.jj/repo/store/git" &&
	export GIT_DIR="$JJROOT/.jj/repo/store/git" ||
	  die "$PWD: failed to find .git store"
    }
}
MESSAGE()
{
  echo "#${FUNC:+ $FUNC:}" "$*"
}
ERROR()
{
  FUNC="${FUNC:-$0}"
  echo "ERROR: ${FUNC:+$FUNC:}" "$*" >&2
  read -t 2
  exit
}

# == Helpers ==
# Echo signoff
echo_signoff()
(
  JJFZF_SIGNOFF=true	# config get jjfzf.signoff
  if test "${JJFZF_SIGNOFF:-true}" == true ; then
    echo # separating newline before signoff section
    $JJFZFSHOW -T 'format_detailed_signature(author) ++ "\n"' -r @ |
      sed -e 's/>.*/>/ ; s/^/Signed-off-by: /'
  fi
)
# Echo current or default message
echo_commit_msg()
(
  R="$1"
  S=$(rev_edpstate "$R")
  # keep existing message
  [[ $S =~ -silent- ]] || {
    rev_description "$R"
    return
  }
  # start with file name prefixes
  cd "$JJROOT" # create root relative file names
  FILES=()
  readarray -t FILES < <(jj log --no-graph -r "$R" -T '' -s | sed 's/^\w //')
  test ${#FILES[@]} -gt 0 &&
    printf "%s: \n" "${FILES[@]}" ||
      echo ""
  # ensure signoff
  echo_signoff
)
# Run user editor: user_editor_on_var <FILE> <VARIABLE>
user_editor_on_var()
{
  local FILE="$1" N=
  declare -n _ueovMSG="$2"			# <VARIABLE> alias
  # create msg file
  temp_dir
  local TEMPFILE="$TEMPD/$FILE"
  cat >"$TEMPFILE" <<<"$_ueovMSG"
  # edit commit msg
  $EDITOR "$TEMPFILE" &&
    N="$(cat "$TEMPFILE")" && {
      test "$_ueovMSG" != "$N" &&
	_ueovMSG="$(cat "$TEMPFILE")"
      rm -f "$TEMPFILE"
      return 0
    }
  rm -f "$TEMPFILE"
  return 1
}

# == Oneline Template ==
# https://github.com/martinvonz/jj/blob/main/docs/templates.md#commit-type
# https://github.com/martinvonz/jj/blob/main/cli/src/config/templates.toml # builtin_log_oneline
JJFZF_ONELINE='
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      separate(" ",
        format_short_change_id_with_hidden_and_divergent_info(self),
        if(author.email(), author.username(), email_placeholder),
        committer.timestamp().local().format("%Y-%m-%d"),
        format_short_commit_id(commit_id),
        bookmarks,
        tags,
        working_copies,
        git_head,
        if(conflict, label("conflict", "conflict")),
        if(empty, label("empty", "(empty)")),
        if(description,
          description.first_line(),
          label(if(empty, "empty"), description_placeholder),
        ),
      ) ++ "\n",
    ),
  )
)' # ◇⚿
OPLOG_ONELINE='
label(if(current_operation, "current_operation"),
  coalesce(
    if(root, format_root_operation(self)),
    concat(
      separate(" ", self.id().short(), self.user(), self.time().start().ago()), " ",
      self.description().first_line(), " ",
      if(self.tags(), self.tags().first_line()),
    ),
  )
)
'

# == Functions ==
FUNCTIONS=()
declare -A KEYBINDINGS
FIRSTS=""

loadlog()
(
  cd "$JJROOT" # create root relative file names
  {
    if test -z "${1:-}" ; then
      # empty query, show all
      jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} log --color=always -T "$JJFZF_ONELINE" -r '::'
    elif jj --config-toml "$TOMLCFG" --no-pager --ignore-working-copy log --no-graph -T 'change_id' -r "$1" >/dev/null 2>&1 ; then
      # use valid revset
      jj --config-toml "$TOMLCFG" --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} log --color=always -T "$JJFZF_ONELINE" -r "$1"
    else
      # search pattern, filter on top of all entries
      jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} log --color=always -T "$JJFZF_ONELINE" -r :: | {
	grep -P "$1" || # invalid patterns like '*' show full log
	  cat # -P '^\W*$|'"$1"
      }
      # TODO: squash entire description into oneline for grep
    fi
  }
)
FUNCTIONS+=( 'loadlog' )

# Toggle preview of evolution-log
toggleevolog()
{
  if test -n "${JJFZF_OUTER_TEMPD:-}" ; then
    if test -e "${JJFZF_OUTER_TEMPD:-}/evolog" ; then
      rm -f "${JJFZF_OUTER_TEMPD:-}/evolog"
    else
      touch "${JJFZF_OUTER_TEMPD:-}/evolog"
    fi
  fi
}
KEYBINDINGS["Ctrl-T"]="toggleevolog"

diff@()
(
  E=$'\e\[[0-9;,]*m'	# \e[1;2m - match ANSI escape sequences
  if tty -s ; then
    { jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} log --color=always --no-graph -T "builtin_log_oneline" -s -r "@"
      jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} show --color=always -T ' "\n" ' -r "@"
    } | $JJFZFPAGER
  else
    jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} log --color=always --no-graph -T "builtin_log_oneline" -s -r "@"
    jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} show --color=always -T ' "\n" ' -r "@"
  fi
)
FUNCTIONS+=( 'diff@' )

# Select Change ID
selectchange()
(
  STARTQUERY="${1:- recent7 }"
  PROMPT="${2:-> }"
  PREVIEW="${3:-}"
  HEADER="${4:-}"
  test -n "$PREVIEW" || PREVIEW="$SELF preview {} {q}"
  REV=$("${FZFPOPUP[@]}" \
	  --preview "[[ {} =~ $REVPAT ]] || exit; export REV=\"\${BASH_REMATCH[1]}\"; $PREVIEW " \
	  --prompt "$PROMPT" \
	  --header "$HEADER" --header-first \
	  --no-tac --no-sort +m --disabled \
	  --bind "change:$RELOAD+refresh-preview" -q "$STARTQUERY" \
	  < <( $SELF loadlog "$STARTQUERY" )
     ) &&
    [[ "$REV" =~ $REVPAT ]] &&
    echo "${BASH_REMATCH[1]}" &&
    exit 0
  exit 1
)
FUNCTIONS+=( 'selectchange' )

# Abandon Revision
abandon()
(
  R="$(xrev "${1:-@}")"
  ( set -x
    jj abandon -r "$R" ) ||
    sleep 1
)
KEYBINDINGS["Alt-A"]="abandon"

# Bookmark Creation
bookmark()
(
  R="$(xrev "${1:-@}")"
  read -p 'Bookmark Name: ' B &&
    test -n "$B" ||
      return
  set +o pipefail &&
    jj --ignore-working-copy bookmark list "$B" 2>/dev/null |
      grep -qF "$B" &&
    S='set -B' || S='create'
  ( set -x
    jj bookmark $S "$B" -r "$R"
    jj git export --quiet
  ) ||
    sleep 1
)
KEYBINDINGS["Alt-B"]="bookmark"

# Commit (full)
commit()
(
  R="$(xrev "${1:-@}")"
  # Edit commit msg if mutable
  IMMU=$($JJFZFSHOW -r "$R" -T 'if(immutable, "true")')
  [[ $IMMU =~ ^true ]] || {
    MSG="$(echo_commit_msg "$R")"
    O="$MSG"
    user_editor_on_var "COMMIT-$R.txt" MSG ||
      ERROR "Commit cancelled by user"
    test "$O" != "$MSG" && (
      set -x
      jj describe --no-edit -r "$R" -m "$MSG"
    ) ||
      sleep 1
  }
  # open new empty working copy commit
  jj new "$R"
)
KEYBINDINGS["Alt-C"]="commit"

# Delete Bookmarks and Tags
delete-refs()
(
  R="$(xrev "${1:-@}")"
  require_git_dir
  jj git export --quiet
  jj git import --quiet
  # Find Bookmark on @ for initial query
  B=$($JJFZFSHOW -r "$R" -T 'concat(separate(" ",bookmarks))') &&
    B="${B%% *}" &&
    test -n "$B" &&
    B=(-q "$B") ||
      B=()
  DEL=$("${FZFPOPUP[@]}" \
  	  --prompt "Delete > " \
	  --header "Delete Bookmarks or Tags" --header-first \
	  --no-tac --no-sort +m \
	  -d: --nth 1 "${B[@]}" \
	  < <(
	  (
	    jj bookmark list | while read n rest ; do
	      printf "%-28s (bookmark) %s\n" "$n" "$rest"
	    done
	    echo
	    git tag -n1 | while read n rest ; do
	      printf "%-28s (tag) %s\n" "$n:" "$rest"
	    done
	  )
	)
     )
  DEL="${DEL%%:*}" # strip :...
  test -n "$DEL" || return
  (
    jj bookmark list | fgrep -q "$DEL:" ;
    echo "bookmark list check: $?"
    if set +o pipefail && jj --ignore-working-copy bookmark list | fgrep -q "$DEL:" ; then
      ( set -x
	jj bookmark delete $DEL
	jj git export --quiet )
    else
      ( set -x
	git tag -d "$DEL"
	jj git import --quiet )
    fi
  ) ||
    sleep 1
)
KEYBINDINGS["Alt-D"]="delete-refs"

# diffedit
diffedit()
(
  R="$(xrev "${1:-@}")"
  jj diffedit -r "$R"
)
KEYBINDINGS["Alt-E"]="diffedit"

# Describe Commit Message
describe()
(
  R="$(xrev "${1:-@}")"
  MSG="$(echo_commit_msg "$R")"
  O="$MSG"
  user_editor_on_var "CHANGE-$R.txt" MSG ||
    ERROR "Describe cancelled by user"
  test "$O" != "$MSG" && (
    set -x
    jj describe --no-edit -r "$R" -m "$MSG"
  ) ||
    sleep 1
)
KEYBINDINGS["Ctrl-D"]="describe"

# File Editor
file-editor()
(
  R="$(xrev "${1:-@}")"
  W="$(xrev "@")"
  # cd root; otherwise revision file paths will mismatch
  cd "$JJROOT"
  # read files edited by revision
  readarray -t FILES < <(jj log --no-graph -r "$R" -T '' -s | sed 's/^\w //')
  # make sure to edit revision
  test "$W" == "$R" || (
    IMMU=$($JJFZFSHOW -r "$R" -T 'if(immutable, "true")')
    [[ $IMMU =~ ^true ]] && CMD='new' || CMD='edit'
    set -x
    jj $CMD -r "$R"
  )
  ( set -x
    ${EDITOR:-nano} "${FILES[@]}"
  )
)
KEYBINDINGS["Ctrl-F"]="file-editor"

# Help with JJ commands
help()
(
  JJCMDS=:
  for w in $( LANG=C
	      jj --help |
		sed -r '1,/^Commands:/d; /^\w/{x;q}; s/^ *(\w+)\b.*/\1/' ) ; do
    [[ $w == help ]] && continue
    JJCMDS="$JJCMDS$w:"
  done
  "${FZFPOPUP[@]}" \
    --header-first --no-sort \
    --header "jj --help" \
    --nth 1 \
    --preview "[[ $JJCMDS =~ :{1}: ]] && jj {1} --help" \
    --bind "enter:execute( test -n {1} || exit; { [[ $JJCMDS =~ :{1}: ]] && jj {1} --help || jj help ;} | $JJFZFPAGER )+abort" \
    < <(jj help)
)
KEYBINDINGS["Ctrl-H"]="help"

# Split change
split-interactive()
(
  R="$(xrev "$1")"
  jj split --interactive -r "$R" ||
    sleep 1
)
KEYBINDINGS["Alt-I"]="split-interactive"

# Backout Commit
backout()
(
  R="$(xrev "${1:-@}")"
  ( set -x
    jj backout -r "$R" -d "$R") ||
    sleep 1
  # TODO: move @ to $R
)
KEYBINDINGS["Alt-K"]="backout"

# Line History
line-history()
(
  R="$(xrev "${1:-@}")"
  C="$(rev_commitid "$R")"
  cd "$JJROOT"	# needed for correct file paths
  require_git_dir
  set +o pipefail
  jj file list -r "$R" |
    xargs grep -s -n '' |
    "${FZFPOPUP[@]}" \
      --preview " git log --no-patch -M -C --find-copies-harder --pretty='%C(blue)%h %C(yellow)%aL %C(reset)%s%n%b' -L{2}:{1} --color $C | sed 's/Signed-off-by:.*//; /^ *$/d' " \
      --bind "enter:execute( git log -M -C --find-copies-harder -L{2}:{1} --color $C | $JJFZFPAGER)" \
      --header "File Line History" \
      --no-tac --no-sort +m -d:
)
KEYBINDINGS["Alt-L"]="line-history"

# Merge into tracked bookmark
merge-upstream()
(
  R="$(xrev "${1:-@}")"
  cd "$JJROOT" # otherwise, a subdir and $PWD could vanish
  C="$(rev_commitid "$R")"
  BOOKMARK="$(rev_bookmarks "$R") $C" &&	# pick first bookmark name or $C
    [[ $BOOKMARK =~ ([^ ]+) ]] && BOOKMARK="${BASH_REMATCH[1]}"
  require_git_dir
  # find upstream bookmark name
  [[ $(jj bookmark list -t) =~ ^([^\ :]+): ]] &&
    DEST="${BASH_REMATCH[1]}" ||
      DEST=
  test -n "$DEST" || ERROR "failed to find tracked upstream bookmark (from jj bookmark list -t)"
  # check for work in progress
  git --no-pager diff -U0 "$DEST..$BOOKMARK" |	# examine all bookmark changes
    egrep "^\+.*\b(XXX|WIP|FIXME)\b" &&	# work still to be done
    WARN="(WARNING: merge diff contains WIP keywords)" ||
      WARN=
  # create merge msg
  MSG=$( SEP="^^^^^^^^^"
	 echo -e "# $SEP DRAFT:  merge $BOOKMARK into $DEST" \
	      "${WARN:+$WARN}" "$SEP # DELETE THIS"
	 echo -e "Merge branch '$BOOKMARK'\n\n* Branch commit log:"
	 git log --pretty=$'\f%s%+b' "$DEST..$BOOKMARK" |
	   sed '/^\(Signed-off-by\|Acked-by\|Tested-by\|Cc\):/d' |
	   sed '/^$/d ; s/^/\t/ ; s/^\t\f/  /'
	 echo_signoff
     )
  # edit merge msg
  O="$MSG"
  user_editor_on_var "MERGE-$R.txt" MSG &&
    test "$O" != "$MSG" ||
      ERROR "Merge commit cancelled by user"
  # create merge
  jj new -m "$MSG" "$DEST" "$BOOKMARK" &&
    jj bookmark set -B -r @ "$DEST" ||
      sleep 1
)
KEYBINDINGS["Alt-M"]="merge-upstream"

# New --insert-before
new-before()
(
  R="$(xrev "${1:-@}")"
  jj new --insert-before "$R" ||
    sleep 1
)
KEYBINDINGS["Alt-N"]="new-before"

# New
new()
(
  R="$(xrev "${1:-@}")"
  ( set -x
    jj new "$R"
  ) || sleep 1
)
KEYBINDINGS["Ctrl-N"]="new"		FIRSTS="$FIRSTS new"

# Oplog
op-log()
(
  RELOAD="reload( exec jj op log --color=always )"
  temp_dir
  echo > $TEMPD/oplog.env
  H="jj op log"$'\n'
  H="$H""Alt-D: Preview diff of '@' at a specific operation"$'\n'
  H="$H""Alt-L: Preview history at a specific operation"$'\n'
  H="$H""Alt-O: Preview oplog entry"$'\n'
  H="$H""Alt-U: Undo operation at oplog entry"$'\n'
  H="$H""Alt-W: Restore oplog working copy into a new '@-' commit"$'\n'
  echo 'VIEW=diff@'		>> $TEMPD/oplog.env
  export JJFZFONELINE
  "${FZFPOPUP[@]}" \
    --preview "[[ {} =~ $OPPAT ]] || exit; export JJFZF_ATOP=\"\${BASH_REMATCH[1]}\" && . $TEMPD/oplog.env && $SELF \$VIEW {q}" \
    --header "$H" --header-first \
    --bind "alt-d:execute( sed 's/^VIEW=.*/VIEW=diff@/' -i $TEMPD/oplog.env )+refresh-preview" \
    --bind "alt-l:execute( sed 's/^VIEW=.*/VIEW=loadlog/' -i $TEMPD/oplog.env )+refresh-preview" \
    --bind "alt-o:execute( sed 's/^VIEW=.*/VIEW=show@oplog/' -i $TEMPD/oplog.env )+refresh-preview" \
    --bind "alt-u:execute( $SELF undo-op@oplog {} )+abort" \
    --bind "alt-w:execute( $SELF workdir-restore@oplog {} )+abort" \
    --no-tac --no-sort +m \
    --bind "enter:execute( [[ {} =~ \$OPPAT ]] || exit && export JJFZF_ATOP=\"\${BASH_REMATCH[1]}\" && $SELF logrev @ {q} )" \
    < <( jj op log --color=always -T "$OPLOG_ONELINE" )
  rm -f $TEMPD/oplog.env
)
KEYBINDINGS["Ctrl-O"]="op-log"

# Split files
split-files()
(
  R="$(xrev "$1")"
  # save @
  AT="$(rev_changeid @)"
  # show undo hints
  jj op log -n1
  echo "# jj op restore $(jj op log -n1 --no-graph -T 'self.id().short()') # <- command to undo the following split"
  # adjust working copy, so 'jj split' resulting change_id is predictable
  test "$R" == "$AT" || (set -x; jj edit -r "$R")
  # split for n-1 files
  R1=true # skip first split, need n-1 splits for n files
  F=$(jj show --tool true -s -T '' -r @)
  while read M F ; do
    $R1 && { R1=false; continue; }
    ( export EDITOR=/usr/bin/true
      set -x
      jj split -r @ -- "$F"
    )
  done <<<"$F"
  # restore working copy
  test "$R" == "$AT" || {
    EXISTS=$($JJFZFSHOW -r "$AT" -T '"true"' 2>/dev/null) # squash might have killed an empty commit
    if [[ $EXISTS =~ ^true ]] ; then
      (set -x; jj edit -r "$AT")
    else
      (set -x; jj new -r "@")
    fi
  }
)
KEYBINDINGS["Alt-P"]="split-files"

show@oplog()
(
  jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} op log --color=always -T builtin_op_log_comfortable -n 1 --no-graph
)
FUNCTIONS+=( 'show@oplog' )

undo-op@oplog()
(
  [[ "$*" =~ $OPPAT ]] && OP="${BASH_REMATCH[1]}" || return
  C="$(jj --no-pager --ignore-working-copy --at-op $OP show --tool true -T commit_id -r @)"
  ( set -x
    jj op undo $OP
  ) ||
    sleep 1
)
FUNCTIONS+=( 'undo-op@oplog' )

workdir-restore@oplog()
(
  set -x
  [[ "$*" =~ $OPPAT ]] && OP="${BASH_REMATCH[1]}" || return
  C="$(jj --no-pager --ignore-working-copy --at-op $OP show --tool true -T commit_id -r @)"
  ( set -x
    jj new --insert-before @	# new @-
    jj restore --from "$C" --to @
  ) ||
    sleep 1
)
FUNCTIONS+=( 'workdir-restore@oplog' )

# Squash Commits
squash-into-parent()
(
  R="$(xrev "${1:-@}")"
  W="$(xrev "@")"
  test "$W" == "$R" &&
    OPT='--keep-emptied' ||
      OPT=
  # export EDITOR=true
  ( set -x
    jj squash -r "$R" $OPT # --use-destination-message
  ) ||
    sleep 1
)
KEYBINDINGS["Alt-Q"]="squash-into-parent"

# Rebase Branch/Source/Revision After/Before/Destination
rebasing()
(
  S="$(xrev "$1")"
  temp_dir
  echo > $TEMPD/rebasing.env
  echo 'FR=--branch'		>> $TEMPD/rebasing.env
  echo 'TO=--destination'	>> $TEMPD/rebasing.env
  export JJFZFONELINE
  PREVIEW=". $TEMPD/rebasing.env"
  PREVIEW="$PREVIEW"' && echo && echo jj rebase $FR '$S' $TO $REV && echo'
  PREVIEW="$PREVIEW"' && F=${FR#--} && echo ${F^^}: && $JJFZFONELINE -r '$S' && echo'
  PREVIEW="$PREVIEW"' && T=${TO#--} && echo ${T^^}: && $JJFZFONELINE -r $REV && echo'
  PREVIEW="$PREVIEW"' && echo COMMON: && $JJFZFONELINE -r "heads( ::'$S' & ::$REV)"'
  H=$'\n'
  H="$H""Alt-B: BRANCH   - Rebase the whole branch relative to destination's ancestors"$'\n'
  H="$H""Alt-S: SOURCE   - Rebase specified revision together with descendants"$'\n'
  H="$H""Alt-R: REVISION - Rebase only given revision, moves descendants onto parent"$'\n'
  H="$H"$'\n'
  H="$H""Alt-D: DESTINATION - The revision to rebase onto"$'\n'
  H="$H""Alt-A: AFTER       - The revision to insert after"$'\n'
  H="$H""Alt-E: BEFORE      - The revision to insert before"$'\n'
  STARTQUERY="recent7 ~ $S"
  REV=$("${FZFPOPUP[@]}" \
	  --preview "[[ {} =~ $REVPAT ]] || exit; export REV=\"\${BASH_REMATCH[1]}\"; $PREVIEW " \
	  --prompt "> " \
	  --header "$H" --header-first \
	  --bind "alt-b:execute( sed 's/^FR=.*/FR=--branch/' -i $TEMPD/rebasing.env )+refresh-preview" \
	  --bind "alt-s:execute( sed 's/^FR=.*/FR=--source/' -i $TEMPD/rebasing.env )+refresh-preview" \
	  --bind "alt-r:execute( sed 's/^FR=.*/FR=--revisions/' -i $TEMPD/rebasing.env )+refresh-preview" \
	  --bind "alt-d:execute( sed 's/^TO=.*/TO=--destination/' -i $TEMPD/rebasing.env )+refresh-preview" \
	  --bind "alt-a:execute( sed 's/^TO=.*/TO=--insert-after/' -i $TEMPD/rebasing.env )+refresh-preview" \
	  --bind "alt-e:execute( sed 's/^TO=.*/TO=--insert-before/' -i $TEMPD/rebasing.env )+refresh-preview" \
	  --no-tac --no-sort +m --disabled \
	  --bind "change:$RELOAD+refresh-preview" -q "$STARTQUERY" \
	  < <( $SELF loadlog "$STARTQUERY" )) &&
    [[ "$REV" =~ $REVPAT ]] &&
    REV="${BASH_REMATCH[1]}" ||
      REV=
  test -n "$REV" || exit 0
  REV="$(rev_changeid "$REV")"
  COMMON=$(jj --ignore-working-copy log --no-graph -T 'change_id++" "' -r " heads(::$REV & ::$S) ") # maybe >1
  . $TEMPD/rebasing.env
  rm -f TEMPD/rebasing.env
  MESSAGE "COMMON='$COMMON' $FR $S $TO $REV"
  ( set -x
    jj rebase $FR "$S" $TO "$REV"
  ) || sleep 1
)
KEYBINDINGS["Alt-R"]="rebasing"

# Restore File from @-
restore-file@()
(
  R="$(xrev "${1:-@}")"
  MODE_FILE=$(jj show --tool true -s -T '' |
		"${FZFPOPUP[@]}" \
		  --preview 'read M F <<<{} && test -n "$F" || exit; jj --no-pager log --color=always -s --patch -T builtin_log_oneline -r @ -- "$F"' \
		  --header "Restore File from @- into @" \
		  )
  read M F <<<"$MODE_FILE"
  test -n "$M" -a -n "$F" || return
  ( set -x
    jj restore -- "$F"
  ) ||
    sleep 1
)
KEYBINDINGS["Alt-S"]="restore-file@"

# Tag Creation
tag()
(
  R="$(xrev "${1:-@}")"
  C="$(rev_commitid "$R")"
  require_git_dir
  read -p 'Tag Name: ' B &&
    test -n "$B" ||
      return
  M="$(git log -1 --oneline "$C")"
  ( set -x
    git tag -a "$B" -m "$M" "$C"
    jj git import --quiet
  ) ||
    sleep 1
)
KEYBINDINGS["Alt-T"]="tag"

# Log single change
logrev()
(
  R="$(xrev "${1:-@}")"
  test "${2:-}" = "--all" && R="::$R"
  E=$'\e\[[0-9;,]*m'	# \e[1;2m - match ANSI escape sequences
  jj --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} log --color=always --no-graph -s --git -T ' "\n" ++ jj_fzf_showdetails' -r "$R" |
    sed -r "1 { /^$/d }; /^(($E)?diff\b *--git)/{s//\n\1/}" |	# insert newline between stats and diff
    $JJFZFPAGER
)
FUNCTIONS+=( 'logrev' )

# Log flat change history
log()
{
  R="$(xrev "${1:-@}")"
  exec $SELF logrev "$R" --all
}
KEYBINDINGS["Ctrl-L"]="log"

# Duplicate Commit
duplicate()
(
  R="$(xrev "${1:-@}")"
  jj duplicate "$R" ||
    sleep 1
)
KEYBINDINGS["Alt-U"]="duplicate"

# fixdivergent
fixdivergent()
(
  # extract likely commit ID
  COMMIT=$(echo " $1 " | grep -Po '(?<= )[a-f0-9]{8,}(?= )') ||
    die 'no divergent commit'
  DIVERGENT_REVISION_COMMIT=' format_short_change_id_with_hidden_and_divergent_info(self) ++ " " ++ commit_id ++ "\n" '
  # make sure it is a divergent commit id
  COMMIT=$(jj log --no-graph -T "$DIVERGENT_REVISION_COMMIT" -r "$COMMIT" | grep -Po '(?<=\?\? )[a-f0-9]{8,}\b') ||
    die 'no divergent commit'
  echo "$SELF fixdivergent $COMMIT" >&2
  jj log --no-graph -T builtin_log_oneline -r "$COMMIT"
  # Find change_id for commit
  R=`jj log --no-graph -T change_id -r "$COMMIT"` ||
    die 'no divergent revision'
  # Set @ top newly inserted empty commit before $R
  ( set -x && jj new --before "$COMMIT" )
  # Figure new commit ID of $R
  NEWCOMMIT=$(jj log --no-graph -T "$DIVERGENT_REVISION_COMMIT" -r '@+' | grep -Po '(?<=\?\? )[a-f0-9]{8,}\b') ||
    die 'missing new commit before divergent revision'
  # Squash commit ID of $R into @, auto-deleting the divergent revision
  ( set -x && jj squash --from "$NEWCOMMIT" --into @ )
  jj log --no-graph -T builtin_log_oneline -r @
)
KEYBINDINGS["Alt-V"]="fixdivergent"

# Gitk View
gitk()
(
  R="$(xrev "${1:-@}")"
  jj git export --quiet
  COMMIT="$(rev_commitid "$R")"
  cd "$JJROOT"
  git update-index --refresh || :
  #test -e "$JJROOT/.jj/repo/store/git" && export GIT_DIR="$JJROOT/.jj/repo/store/git" || export GIT_DIR="$JJROOT/.git"
  # readarray -t HEADS < <( jj --ignore-working-copy log --no-graph -T 'commit_id ++ "\n"' -r ' heads(::) ' )
  # beware gitk is executable and sh function
  ( set -x
    exec gitk --branches --tags --remotes --select-commit=$COMMIT $COMMIT HEAD -- # "${HEADS[@]}"
  )
  jj git import --quiet
)
KEYBINDINGS["Ctrl-V"]="gitk"

# Edit (New) Working Copy
working-copy()
(
  R="$(xrev "${1:-@}")"
  IMMU=$($JJFZFSHOW -r "$R" -T 'if(immutable, "true")')
  [[ $IMMU =~ ^true ]] && CMD='new' || CMD='edit'
  jj $CMD -r "$R" ||
    sleep 1
)
KEYBINDINGS["Ctrl-W"]="working-copy"

# Swap Commits
swap-commits()
(
  R="$(xrev "${1:-@}")"
  jj rebase -r "$R" --insert-before "$R-"
)
KEYBINDINGS["Alt-X"]="swap-commits"

# Undo last JJ op
undo()
(
  jj op undo
)
KEYBINDINGS["Alt-Z"]="undo"

# == Function calling ==
if [[ "${1:-}" =~ ^[a-z0-9A-Z_+@-]+ ]] && [[ " ${KEYBINDINGS[@]} ${FUNCTIONS[@]} " =~ \ $1\  ]] ; then
  [[ " ${KEYBINDINGS[@]} ${FUNCTIONS[@]} " =~ \ $1\  ]] &&
    SYNC='jj status' || # sync JJ after modifications
      SYNC=:		# skip syncing for preview functions
  $SYNC >/dev/null
  FUNC="$1" "$@" && E=$? || E=$?
  $SYNC >/dev/null || :
  exit $E
fi

# == Sync ==
# Synchronize before changes in git or @ mess up state during jj log
jj status

# == Help / Docs ==
HELPKEYS=$(declare -p KEYBINDINGS) && declare -A HELPKEYS="${HELPKEYS#*=}"	# copy KEYBINDINGS -> HELPKEYS
HELPKEYS[Ctrl-↑]='preview-up'
HELPKEYS[Ctrl-↓]='preview-down'
HELPKEYS[Ctrl-U]='clear-filter'
HELPKEYS[recent7]='default revset'
KEYS="${!HELPKEYS[@]}"
KEYS=$(sort <<<"${KEYS// /$'\n'}")
WHITE="                                                                                "
HEADER=""
test "$COLUMNS" -ge 166 && W=3 || { test "$COLUMNS" -ge 114 && W=2 || W=1 ;}
i=0
for k in $KEYS ; do
  S="$k: ${HELPKEYS[$k]}"	# printf(1) cannot count UTF-8 continuation chars (0x80-0xBF)
  test ${#S} -lt 26 && S="$S${WHITE:0:$(( 26 - ${#S} ))}"	# so, format like %-26s
  HEADER="$HEADER$S" #$HIGH"
  i=$(($i+1))
  test 0 == $(($i % $W)) &&
    HEADER="$HEADER"$'\n' ||
      HEADER="$HEADER "
done

# == SWITCHES ==
TRACK=--track	# not in fzf-0.29
FZFHELP="$(fzf --help 2>&1)" && [[ "$FZFHELP" =~ "--track" ]] || TRACK=

# == RELOAD ==
JJLOGCMD=( jj --no-pager --ignore-working-copy ${JJFZF_ATOP:+--at-op $JJFZF_ATOP} log --color=always -T jj_fzf_oneline -r '::' )
RELOAD='reload(eval "$FZF_DEFAULT_COMMAND")'

# == FZF ==
BIND=()
for k in "${!KEYBINDINGS[@]}" ; do
  fun="${KEYBINDINGS[$k]}"
  postcmd=""
  [[ " $FIRSTS " == *" $fun "* ]] && postcmd="+first"
  BIND+=( --bind "${k,,}:execute( $SELF $fun {} {q} )+$RELOAD$postcmd" )
done

if test -z "${TEMPD:-}" ; then
  temp_dir
  export JJFZF_OUTER_TEMPD="$TEMPD"
fi
jj_config >"$TEMPD/jjfzfconfig.toml"
export JJ_CONFIG="$TEMPD/jjfzfconfig.toml"

export FZF_DEFAULT_COMMAND="${JJLOGCMD[@]@Q}"
fzf \
  "${FZFSETTINGS[@]}" \
  --bind "ctrl-u:clear-query+clear-selection+clear-screen" \
  --bind "ctrl-z:execute( $JJSUBSHELL )+execute( jj --no-pager st )+$RELOAD" \
  --bind "enter:execute( $SELF logrev {} {q} )+$RELOAD" \
  "${BIND[@]}" \
  $TRACK \
  --preview " exec $SELF preview {} {q} " \
  --header "$HEADER" --header-first \
  --prompt '  :: > ' \
  --no-tac --no-sort +m
